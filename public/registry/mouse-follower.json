{
  "name": "mouse-follower",
  "type": "registry:ui",
  "files": [
    {
      "path": "components/ui/mouse-follower.tsx",
      "content": "'use client';\n\nimport { useEffect, useRef, useState } from 'react';\nimport { motion, useMotionValue, useSpring, useTransform } from 'framer-motion';\n\nexport default function MouseFollower() {\n  const cursorRef = useRef<HTMLDivElement>(null);\n  const cursorOuterRef = useRef<HTMLDivElement>(null);\n\n  const [isHovering, setIsHovering] = useState(false);\n\n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n\n  const smoothOptions = { damping: 20, stiffness: 300, mass: 0.5 };\n  const smoothX = useSpring(mouseX, smoothOptions);\n  const smoothY = useSpring(mouseY, smoothOptions);\n\n  const outerX = useSpring(mouseX, { ...smoothOptions, damping: 15 });\n  const outerY = useSpring(mouseY, { ...smoothOptions, damping: 15 });\n\n  const scale = useTransform<number, number>(\n    [smoothX, smoothY],\n    ([latestX, latestY]) => {\n      const distance = Math.abs(latestX - mouseX.get()) + Math.abs(latestY - mouseY.get());\n      return 1 + Math.min(distance * 0.002, 0.5);\n    }\n  );\n\n  const manageMouseMove = (e: MouseEvent) => {\n    const { clientX, clientY } = e;\n    mouseX.set(clientX);\n    mouseY.set(clientY);\n  };\n\n  useEffect(() => {\n    window.addEventListener('mousemove', manageMouseMove);\n\n    const handleMouseEnter = () => setIsHovering(true);\n    const handleMouseLeave = () => setIsHovering(false);\n\n    const interactiveElements = document.querySelectorAll('a, button, [role=\"button\"]');\n    interactiveElements.forEach(el => {\n      el.addEventListener('mouseenter', handleMouseEnter);\n      el.addEventListener('mouseleave', handleMouseLeave);\n    });\n\n    return () => {\n      window.removeEventListener('mousemove', manageMouseMove);\n      interactiveElements.forEach(el => {\n        el.removeEventListener('mouseenter', handleMouseEnter);\n        el.removeEventListener('mouseleave', handleMouseLeave);\n      });\n    };\n  }, []);\n\n  return (\n    <>\n      <motion.div\n        ref={cursorRef}\n        className=\"pointer-events-none fixed z-50 h-4 w-4 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 mix-blend-difference\"\n        style={{\n          left: smoothX,\n          top: smoothY,\n          x: '-50%',\n          y: '-50%',\n          scale: isHovering ? 2 : scale,\n        }}\n      />\n      <motion.div\n        ref={cursorOuterRef}\n        className=\"pointer-events-none fixed z-40 h-8 w-8 rounded-full bg-transparent opacity-30 blur-sm mix-blend-screen dark:mix-blend-difference\"\n        style={{\n          left: outerX,\n          top: outerY,\n          x: '-50%',\n          y: '-50%',\n          scale: isHovering ? 1 : 1,\n        }}\n      />\n    </>\n  );\n}\n",
      "type": "registry:ui",
      "target": "components/ui/mouse-follower.tsx"
    }
  ],
  "author": "Aman Shakya <hi@amanshakya.in>",
  "title": "Mouse Follower"
}
